@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Flash Cards</title>
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
</head>
<body ng-app="flashCardApp">
    <div class="container" ng-controller="FlashCardController">
        <header class="page-header">
            <h1>Flash Cards<small> Study Up, Yo!</small></h1>
        </header>
        <nav>
            <ul class="nav nav-pills">
                <li class="active"><a href="#">Study</a></li>
                <li><a href="#">Stats</a></li>
                <li><a href="#">Create</a></li>
            </ul>
        </nav>
        <div class="row">
            <div class="col-md-3">
                <header>
                    <h3>Your Stacks</h3>
                </header>
                <ul class="list-unstyled">
                    <li class="well well-sm" ng-repeat="stack in stacks">
                        <h4>{{stack.title}}</h4>
                        <div>
                            <p><small>Deck has {{stack.cards.length}} cards</small></p>
                            <input type="button" value="Study!" class="btn btn-success btn-xs" ng-click="study(stack)" ng-disabled="currentStack" />
                        </div>
                    </li>
                </ul>
            </div>
            <div class="col-md-9">
                <header>
                    <h3>Study</h3>
                </header>
                <div ng-hide="showingSummary">
                    <div ng-show="currentStack">
                        <header>
                            <h5>Studying {{ currentStack.title }}</h5>
                        </header>
                        <div ng-show="showingQuestion">
                            <h3>{{currentCard.q}}</h3>
                            <div>
                                <input type="button" class="btn btn-info" value="Flip Card" ng-click="flipCard()" />
                            </div>
                        </div>
                        <div ng-hide="showingQuestion">
                            <h3>Answer: {{currentCard.a}}</h3>
                            <div>
                                <input type="button" class="btn btn-success" value="I Was Right!" ng-click="nextCard(true)" />
                                <input type="button" class="btn btn-danger" value="I Was Wrong!" ng-click="nextCard(false)" />
                            </div>
                        </div>
                    </div>
                </div>
                <div ng-show="showingSummary">
                    <h1>Good Job!</h1>
                    <p>You got {{stats.rightAnswers}} right answers! and {{stats.wrongAnswers}} wrong answers!</p>


                </div>
            </div>
        </div>

    </div>
    <script src="~/Scripts/angular.js"></script>
    <script>
        var app = angular.module("flashCardApp", []);
        app.controller("FlashCardController", function ($scope, stacksResource) {
            stacksResource.loadData().then(function (data) {
                $scope.stacks = data;
            });

            $scope.showingSummary = false;
            $scope.currentStack = null;
            $scope.currentCard = null;
            $scope.showingQuestion = true;

            $scope.study = function (stack) {
                $scope.currentStack = angular.copy(stack);
                $scope.currentCard = $scope.currentStack.cards.pop();
                $scope.showingSummary = false;
                $scope.showingQuestion = true;
                $scope.stats = {
                    rightAnswers: 0,
                    wrongAnswers: 0,
                    startTime: 0,
                    endTime: 0,
                    totalTime: 0
                };
            }

            $scope.flipCard = function () {
                $scope.showingQuestion = false;
            }

            $scope.stats = {
                rightAnswers: 0,
                wrongAnswers: 0,
                startTime: 0,
                endTime: 0,
                totalTime: 0
            };

            $scope.nextCard = function (answerRight) {
                if (answerRight) {
                    $scope.stats.rightAnswers++;
                } else {
                    $scope.stats.wrongAnswers++;
                }
                var nextCard = $scope.currentStack.cards.pop();
                if (nextCard) {

                    $scope.currentCard = nextCard;
                    $scope.showingQuestion = true;
                } else {
                    console.warn("Out of cards, dude.");
                    $scope.showingSummary = true;
                    $scope.currentStack = null;
                    // show a summary.
                    // give option to start over.
                    // -- give option to share your stats!
                }
            };
        });

        app.service("stacksResource", function ($q, flashCardsPersistence) {
            var fakeStacks = [
                {
                    title: "JavaScript",  cards: [
                        { q: "Are there classes in JavaScript?", a: "Nope" },
                        { q: "Are semicolons optional in JavaScript?", a: "Sometimes" },
                        { q: "How do you do multi-threading in JavaScript", a: "You can't. Webworkers are close" },
                        { q: "Java is to JavaScript as Ham is to Hamster", a: "True" }
                    ]
                },
                {
                    title: "Star Wars", cards: [
                        { q: "What are the little guys who collect droids on tatooine called?", a: "Jawas" },
                        { q: "True or False: Leia is actually Jabba The Hutt's sister.", a: "false" }
                    ]
                },
                {
                    title: "State Capitals",  cards: [
                        { q: "Ohio", a: "Columbus" },
                        { q: "Colorado", a: "Denver" },
                        { q: "Indiana", a: "Indianapolis" }
                    ]
                }

            ];
            return {
                loadData: function loadData() {
                    var d = $q.defer(); // <- var d = new $.Deferred();
                    flashCardsPersistence.open().then(function () {
                        flashCardsPersistence.getAll().then(function (items) {
                            d.resolve(items);
                        }, function (error) {
                            console.log(error);
                            if (error === "no rows") {
                                var promises = [];
                                fakeStacks.forEach(function(stack) {
                                    promises.push(flashCardsPersistence.addItem(stack));
                                });
                                $q.all(promises).then(function() {
                                    d.resolve(fakeStacks);
                                });
                            } else {
                                d.reject();
                            }
                        });
                    });
                    return d.promise; // <- return d.promise();
                }
            };
        });


        app.service("flashCardsPersistence", function ($q) {
            if (!window.indexedDB) {
                alert("Your browser doesn't support IndexedDb. good luck with that.");
            }
            var dbName = "flash-cards";
            var version = 1;
            var db;

            function openDb() {
                var d = $q.defer();
                var request = indexedDB.open(dbName, version);
                request.onsuccess = function (e) {
                    db = e.target.result;
                    d.resolve();
                };
                request.onerror = function (e) {
                    console.error("Database Error");
                    console.dir(e);
                    d.reject(e.toString());
                };
                request.onupgradeneeded = function (e) {
                    db = e.target.result;
                    var objectStore = db.createObjectStore("stacks", { autoIncrement: true });
                    //objectStore.createIndex("store", "store", { unique: false });
                };
                return d.promise;
            }

            function addItem(item) {
                var d = $q.defer();
                var trans = db.transaction(["stacks"], "readwrite");
                var items = trans.objectStore("stacks");
                items.add(item);
                trans.oncomplete = function () {
                    d.resolve();
                };
                return d.promise;
            }

            function getAll() {

                var d = $q.defer();
                if (!db.objectStoreNames.contains("stacks")) {
                    d.reject("No Object Store");
                } else {
                    var items = db.transaction(["stacks"], "readonly").objectStore("stacks");
                    var result = [];
                    var tx = items.openCursor();
                    tx.onsuccess = function (event) {
                        console.log("got the rows!");
                        var cursor = event.target.result;

                        if (!cursor) {
                            if (result.length > 0) {

                                d.resolve(result);
                            } else {
                                d.reject("no rows");
                            }
                        } else {
                            result.push(cursor.value);
                            cursor.continue();
                        }
                    };

                    tx.onerror = function (e) {
                        console.error(e);
                        d.reject(e.toString());
                    };
                }
                return d.promise;
            }

            return {
                open: openDb,
                addItem: addItem,
                getAll: getAll
            };

        });


    </script>
</body>
</html>
